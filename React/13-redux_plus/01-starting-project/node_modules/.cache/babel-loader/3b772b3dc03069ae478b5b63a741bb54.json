{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false\n  },\n  // 리듀서는 비동기함수요청이나 변경을 할수없다(오버라이딩)\n  // 혹은 외부에서 강제로 변경할수없다.\n  // 따라서 비동기 처리를할경우 useEffect를 사용거나 thunk함수를 사용하는데\n  // thunk함수는 특정함수가 동작을 완료할때까지 대기하도록 돕는 함수이다.\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      console.log(newItem.id);\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        console.log(\"test\");\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        console.log(existingItem.quantity);\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemToCart(state, action) {\n      const id = action.payload;\n      console.log(id);\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n}); // export const sendCartData = (cart) => {\n//   return async (dispatch) => {\n//     dispatch(\n//       uiActions.showNotification({\n//         status: \"pending\",\n//         title: \"sending...\",\n//         message: \"sending cart data!\",\n//       })\n//     );\n//     const sendRequeset = async () => {\n//       const res = await fetch(\n//         \"https://react-http-dd4c9-default-rtdb.firebaseio.com/cart.json\",\n//         {\n//           method: \"PUT\",\n//           body: JSON.stringify(cart),\n//         }\n//       );\n//       if (!res.ok) {\n//         throw new Error(\"Sending cart data failed\");\n//       }\n//     };\n//     try {\n//       await sendRequeset();\n//       dispatch(\n//         uiActions.showNotification({\n//           status: \"Success\",\n//           title: \"Success!\",\n//           message: \"Success receive Data!\",\n//         })\n//       );\n//     } catch {\n//       dispatch(\n//         uiActions.showNotification({\n//           status: \"error\",\n//           title: \"Error!\",\n//           message: \"Error receive Data!\",\n//         })\n//       );\n//     }\n//   };\n// };\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","console","log","id","existingItem","find","item","push","price","quantity","totalPrice","title","removeItemToCart","filter","cartActions","actions"],"sources":["/home/ree/WORKSPACE/TECH/React/13-redux_plus/01-starting-project/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false\n  },\n  // 리듀서는 비동기함수요청이나 변경을 할수없다(오버라이딩)\n  // 혹은 외부에서 강제로 변경할수없다.\n  // 따라서 비동기 처리를할경우 useEffect를 사용거나 thunk함수를 사용하는데\n  // thunk함수는 특정함수가 동작을 완료할때까지 대기하도록 돕는 함수이다.\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      console.log(newItem.id);\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true;\n      if (!existingItem) {\n        console.log(\"test\");\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n        console.log(existingItem.quantity);\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemToCart(state, action) {\n      const id = action.payload;\n      console.log(id);\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    },\n  },\n});\n\n// export const sendCartData = (cart) => {\n//   return async (dispatch) => {\n//     dispatch(\n//       uiActions.showNotification({\n//         status: \"pending\",\n//         title: \"sending...\",\n//         message: \"sending cart data!\",\n//       })\n//     );\n\n//     const sendRequeset = async () => {\n//       const res = await fetch(\n//         \"https://react-http-dd4c9-default-rtdb.firebaseio.com/cart.json\",\n//         {\n//           method: \"PUT\",\n//           body: JSON.stringify(cart),\n//         }\n//       );\n\n//       if (!res.ok) {\n//         throw new Error(\"Sending cart data failed\");\n//       }\n//     };\n\n//     try {\n//       await sendRequeset();\n//       dispatch(\n//         uiActions.showNotification({\n//           status: \"Success\",\n//           title: \"Success!\",\n//           message: \"Success receive Data!\",\n//         })\n//       );\n//     } catch {\n//       dispatch(\n//         uiActions.showNotification({\n//           status: \"error\",\n//           title: \"Error!\",\n//           message: \"Error receive Data!\",\n//         })\n//       );\n//     }\n//   };\n// };\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAE;IACZC,KAAK,EAAE,EADK;IAEZC,aAAa,EAAE,CAFH;IAGZC,OAAO,EAAE;EAHG,CAFc;EAO5B;EACA;EACA;EACA;EACAC,QAAQ,EAAE;IACRC,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACzBD,KAAK,CAACJ,aAAN,GAAsBK,MAAM,CAACC,OAAP,CAAeN,aAArC;MACAI,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAAP,CAAeP,KAA7B;IACD,CAJO;;IAKRQ,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;MAC3B,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;MACAG,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,EAApB;MACA,MAAMC,YAAY,GAAGR,KAAK,CAACL,KAAN,CAAYc,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYH,OAAO,CAACG,EAA/C,CAArB;MACAP,KAAK,CAACJ,aAAN;MACAI,KAAK,CAACH,OAAN,GAAgB,IAAhB;;MACA,IAAI,CAACW,YAAL,EAAmB;QACjBH,OAAO,CAACC,GAAR,CAAY,MAAZ;QACAN,KAAK,CAACL,KAAN,CAAYgB,IAAZ,CAAiB;UACfJ,EAAE,EAAEH,OAAO,CAACG,EADG;UAEfK,KAAK,EAAER,OAAO,CAACQ,KAFA;UAGfC,QAAQ,EAAE,CAHK;UAIfC,UAAU,EAAEV,OAAO,CAACQ,KAJL;UAKfnB,IAAI,EAAEW,OAAO,CAACW;QALC,CAAjB;MAOD,CATD,MASO;QACLV,OAAO,CAACC,GAAR,CAAYE,YAAY,CAACK,QAAzB;QACAL,YAAY,CAACK,QAAb;QACAL,YAAY,CAACM,UAAb,GAA0BN,YAAY,CAACM,UAAb,GAA0BV,OAAO,CAACQ,KAA5D;MACD;IACF,CAzBO;;IA0BRI,gBAAgB,CAAChB,KAAD,EAAQC,MAAR,EAAgB;MAC9B,MAAMM,EAAE,GAAGN,MAAM,CAACC,OAAlB;MACAG,OAAO,CAACC,GAAR,CAAYC,EAAZ;MACA,MAAMC,YAAY,GAAGR,KAAK,CAACL,KAAN,CAAYc,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYA,EAAvC,CAArB;MACAP,KAAK,CAACJ,aAAN;MACAI,KAAK,CAACH,OAAN,GAAgB,IAAhB;;MACA,IAAIW,YAAY,CAACK,QAAb,KAA0B,CAA9B,EAAiC;QAC/Bb,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYsB,MAAZ,CAAoBP,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYA,EAAzC,CAAd;MACD,CAFD,MAEO;QACLC,YAAY,CAACK,QAAb;MACD;IACF;;EArCO;AAXkB,CAAD,CAA7B,C,CAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,WAAW,GAAG1B,SAAS,CAAC2B,OAA9B;AAEP,eAAe3B,SAAf"},"metadata":{},"sourceType":"module"}