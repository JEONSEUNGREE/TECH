JSX의 한계

1. jsx의 한계 중 하나는 루트레벨에 노드가 여러개인경우 에러가발생한다.
따라서 최상위 루트는 하나의 JSX로 구성되어야한다.

이유는 다음과같다.
1_일반적으로 사용하는 JSX
return (
    <div>
    </div>
    <div>
    </div>
);

2_React 함수를 사용한 표기법
return (
    React.createElement("h2", {}, "Hi there")
    React.createElement("p", {}, "This does not work :-( ")
)
이유는 자바스크립트에서 반환값은 하나여야함 하기때문이다.

해결법은 최상위 루트를 하나의 노드로 구성하는 것이다.
또다른 방법으로는 [] 배열형태로 감싸고 key를 내려주는 것도 존재한다.
<></>, React.Fragment 혹은  Helpers의 Wrappers 컴포넌트와 같이 props.children 사용한다.
<div></div>를 남발하다가는 돔 렌더링에 비용이 커질수있기에 신중하게 사용해야한다.

2. JSX Portals
단순히 작동하는 코드라고 해서 막 사용하기에는 문제가 발생할 여지가 있는 코드들이 많이 존재한다.
예를 들어 모달창을 만들었는데 작동한후에 특정 노드 옆에 생성이 될텐데 이때 여러 노드들과 겹치고 프로젝트 규모가 크다면
이 오버레이에 해당하는 문제가 발생할수있다. 이에 포털을 사용한다.
특정 노드에 아이디를 적고

3. ref
vue의 $ref와 마찬가지로 ref를 사용해 직접 돔 조작이 가능하며 읽는 부분에서는 state를 대체해도 되지만
쓰기부분에서는 지양하는게 좋고 react에서 조작하는 편에 맡기는게 좋다.
state에 의해 제어된 컴포넌트와 제어되지않는 컴포넌트가 있다라고 자주 표한하게된다.