{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/06-class-component/src/components/Users.js\";\nimport { Component, useState } from \"react\";\nimport User from \"./User\";\nimport classes from \"./Users.module.css\"; // const DUMMY_USERS = [\n//   { id: \"u1\", name: \"Max\" },\n//   { id: \"u2\", name: \"Manuel\" },\n//   { id: \"u3\", name: \"Julie\" },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Users extends Component {\n  constructor() {\n    // 함수형의 state의 경우 원시타입등이 가능했지만\n    // 클래스의 경우 항상 객체타입이어야한다.\n    // setState로 활용시 함수형과 다르게 오버라이딩하지않고 병합함으로 덮어써질우려가없다.\n    super();\n    this.state = {\n      showUsers: true,\n      more: \"Test\"\n    };\n  }\n\n  toggleUsersHandler() {\n    this.setState(curState => {\n      return {\n        showUsers: !curState.showUsers\n      };\n    });\n  }\n\n  render() {\n    const usersList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.props.users.map(user => /*#__PURE__*/_jsxDEV(User, {\n        name: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.users,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleUsersHandler.bind(this),\n        children: [this.state.showUsers ? \"Hide\" : \"Show\", \" Users\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), this.state.showUsers && usersList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n} // const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? \"Hide\" : \"Show\"} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\n\nexport default Users; // 클래스 컴포넌트의 생명주기\n// componentDidMount -> useEffect(...,[])에 빈배열의 형태 의존성이없는경우\n// componentDidUpdate -> 재평가 재호출시 useEffect(...,[someValue]) 특정 의존성배열이 존재하는경우\n// componentWillUnmmount -> 컴포넌트가 DOM에서 삭제되기 직전에 호출되며 useEffect()에 cleanup함수와 같다.","map":{"version":3,"names":["Component","useState","User","classes","Users","constructor","state","showUsers","more","toggleUsersHandler","setState","curState","render","usersList","props","users","map","user","name","id","bind"],"sources":["/home/ree/WORKSPACE/TECH/React/06-class-component/src/components/Users.js"],"sourcesContent":["import { Component, useState } from \"react\";\nimport User from \"./User\";\n\nimport classes from \"./Users.module.css\";\n\n// const DUMMY_USERS = [\n//   { id: \"u1\", name: \"Max\" },\n//   { id: \"u2\", name: \"Manuel\" },\n//   { id: \"u3\", name: \"Julie\" },\n// ];\n\nclass Users extends Component {\n  constructor() {\n    // 함수형의 state의 경우 원시타입등이 가능했지만\n    // 클래스의 경우 항상 객체타입이어야한다.\n    // setState로 활용시 함수형과 다르게 오버라이딩하지않고 병합함으로 덮어써질우려가없다.\n    super();\n    this.state = {\n      showUsers: true,\n      more: \"Test\",\n    };\n  }\n\n  toggleUsersHandler() {\n    this.setState((curState) => {\n      return { showUsers: !curState.showUsers };\n    });\n  }\n\n\n  render() {\n    const usersList = (\n      <ul>\n        {this.props.users.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n      <div className={classes.users}>\n        {/* 주위를 둘러싼 클래스를 참조하는지 여부를 bind로 사용해 지정한다. */}\n        <button onClick={this.toggleUsersHandler.bind(this)}>\n          {this.state.showUsers ? \"Hide\" : \"Show\"} Users\n        </button>\n        {this.state.showUsers && usersList}\n      </div>\n    );\n  }\n}\n\n// const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? \"Hide\" : \"Show\"} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\nexport default Users;\n\n// 클래스 컴포넌트의 생명주기\n// componentDidMount -> useEffect(...,[])에 빈배열의 형태 의존성이없는경우\n// componentDidUpdate -> 재평가 재호출시 useEffect(...,[someValue]) 특정 의존성배열이 존재하는경우\n// componentWillUnmmount -> 컴포넌트가 DOM에서 삭제되기 직전에 호출되며 useEffect()에 cleanup함수와 같다."],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,OAAP,MAAoB,oBAApB,C,CAEA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;EAC5BK,WAAW,GAAG;IACZ;IACA;IACA;IACA;IACA,KAAKC,KAAL,GAAa;MACXC,SAAS,EAAE,IADA;MAEXC,IAAI,EAAE;IAFK,CAAb;EAID;;EAEDC,kBAAkB,GAAG;IACnB,KAAKC,QAAL,CAAeC,QAAD,IAAc;MAC1B,OAAO;QAAEJ,SAAS,EAAE,CAACI,QAAQ,CAACJ;MAAvB,CAAP;IACD,CAFD;EAGD;;EAGDK,MAAM,GAAG;IACP,MAAMC,SAAS,gBACb;MAAA,UACG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAsBC,IAAD,iBACpB,QAAC,IAAD;QAAoB,IAAI,EAAEA,IAAI,CAACC;MAA/B,GAAWD,IAAI,CAACE,EAAhB;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QADF;;IAQA,oBACE;MAAK,SAAS,EAAEhB,OAAO,CAACY,KAAxB;MAAA,wBAEE;QAAQ,OAAO,EAAE,KAAKN,kBAAL,CAAwBW,IAAxB,CAA6B,IAA7B,CAAjB;QAAA,WACG,KAAKd,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,MADnC;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,EAKG,KAAKD,KAAL,CAAWC,SAAX,IAAwBM,SAL3B;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AArC2B,C,CAwC9B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,KAAf,C,CAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}