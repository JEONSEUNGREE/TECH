{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requesConfig, applyData) => {\n    // useEffect부분에서 아래의 상태값이 바뀜에따라 함수가 재실행되며 무한루프에 빠진다.\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requesConfig.url, {\n        method: requesConfig.method ? requesConfig.method : \"GET\",\n        headers: requesConfig.headers ? requesConfig.headers : {},\n        body: requesConfig.body ? JSON.stringify(requesConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    // isLoading : isLoading,\n    // error: error,\n    // sendRequest: sendRequest\n    // 모던 자바스크립트로 속성과 이름이 같은경우 아래와같이 줄일수있다.\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requesConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["/home/ree/WORKSPACE/TECH/React/09_1-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(async (requesConfig, applyData) => {\n    // useEffect부분에서 아래의 상태값이 바뀜에따라 함수가 재실행되며 무한루프에 빠진다.\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requesConfig.url, {\n        method: requesConfig.method ? requesConfig.method : \"GET\",\n        headers: requesConfig.headers ? requesConfig.headers : {},\n        body: requesConfig.body ? JSON.stringify(requesConfig.body) : null,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, []);\n\n  return {\n    // isLoading : isLoading,\n    // error: error,\n    // sendRequest: sendRequest\n    // 모던 자바스크립트로 속성과 이름이 같은경우 아래와같이 줄일수있다.\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\n\nexport default useHttp;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;EAEA,MAAMO,WAAW,GAAGN,WAAW,CAAC,OAAOO,YAAP,EAAqBC,SAArB,KAAmC;IACjE;IACAL,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR;;IACA,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,YAAY,CAACI,GAAd,EAAmB;QAC7CC,MAAM,EAAEL,YAAY,CAACK,MAAb,GAAsBL,YAAY,CAACK,MAAnC,GAA4C,KADP;QAE7CC,OAAO,EAAEN,YAAY,CAACM,OAAb,GAAuBN,YAAY,CAACM,OAApC,GAA8C,EAFV;QAG7CC,IAAI,EAAEP,YAAY,CAACO,IAAb,GAAoBC,IAAI,CAACC,SAAL,CAAeT,YAAY,CAACO,IAA5B,CAApB,GAAwD;MAHjB,CAAnB,CAA5B;;MAMA,IAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;MAEAZ,SAAS,CAACW,IAAD,CAAT;IACD,CAdD,CAcE,OAAOE,GAAP,EAAY;MACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;IACD;;IACDnB,YAAY,CAAC,KAAD,CAAZ;EACD,CAtB8B,EAsB5B,EAtB4B,CAA/B;EAwBA,OAAO;IACL;IACA;IACA;IACA;IACAD,SALK;IAMLE,KANK;IAOLE;EAPK,CAAP;AASD,CArCD;;GAAML,O;;AAuCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}