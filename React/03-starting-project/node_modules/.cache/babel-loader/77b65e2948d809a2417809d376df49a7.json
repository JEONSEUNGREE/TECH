{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/03-starting-project/src/App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\nimport React, { useState, useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/Auth-Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // 다음과같이 호출시 로컬저장소에 정보로 useState 값 변경시 함수를 재호출함으로 무한 루프에 빠질수있다.\n  // const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  // if (storedUserLoggedInInformation === \"1\") {\n  //   setIsLoggedIn(true);\n  // }\n  // useEffect를 사용시 모든 컴포넌트 재평가 후에 실행되며\n  // 리액트에 의해서 실행된다.\n  // 처음 앱이 실행될때 변경된것으로 간주하며서 useEffect의 의존성이 변경된것으로 보며 실행된다.\n  // 한번 실행되며 변경확인시 실행됨\n  // useEffect(() => {\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n  const ctx = useContext(AuthContext);\n  return (\n    /*#__PURE__*/\n    // <AuthContext.Provider\n    //   value={{\n    //     isLogginedIn: isLoggedIn,\n    //     onLogout: logoutHandler\n    //   }}\n    // >\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this) // </AuthContext.Provider>\n\n  );\n}\n\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useContext","Login","Home","MainHeader","AuthContext","App","ctx","isLoggedIn"],"sources":["/home/ree/WORKSPACE/TECH/React/03-starting-project/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport React, { useState, useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/Auth-Context\";\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // 다음과같이 호출시 로컬저장소에 정보로 useState 값 변경시 함수를 재호출함으로 무한 루프에 빠질수있다.\n  // const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  // if (storedUserLoggedInInformation === \"1\") {\n  //   setIsLoggedIn(true);\n  // }\n\n  // useEffect를 사용시 모든 컴포넌트 재평가 후에 실행되며\n  // 리액트에 의해서 실행된다.\n  // 처음 앱이 실행될때 변경된것으로 간주하며서 useEffect의 의존성이 변경된것으로 보며 실행된다.\n  // 한번 실행되며 변경확인시 실행됨\n  // useEffect(() => {\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  const ctx = useContext(AuthContext);\n  return (\n    // <AuthContext.Provider\n    //   value={{\n    //     isLogginedIn: isLoggedIn,\n    //     onLogout: logoutHandler\n    //   }}\n    // >\n    <React.Fragment>\n      <MainHeader />\n      {/* <MainHeader onLogout={logoutHandler} /> */}\n      <main>\n        {!ctx.isLoggedIn && <Login />}\n        {ctx.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n    // </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA,MAAMC,GAAG,GAAGN,UAAU,CAACI,WAAD,CAAtB;EACA;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA,QAAC,KAAD,CAAO,QAAP;MAAA,wBACE,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAGE;QAAA,WACG,CAACE,GAAG,CAACC,UAAL,iBAAmB,QAAC,KAAD;UAAA;UAAA;UAAA;QAAA,QADtB,EAEGD,GAAG,CAACC,UAAJ,iBAAkB,QAAC,IAAD;UAAA;UAAA;UAAA;QAAA,QAFrB;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,CAeE;;EAfF;AAiBD;;GAnDQF,G;;KAAAA,G;AAqDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}