일반적으로 사용하는 useState훅을 사용하면 새로운 상태를 만들어서 자동적으로 useState를 호출한 컴포넌트에 연결할 수 있다
이런 연결도 리액트가 담당하는 역할이다.
useState를 호출하면 리액트는 백그라운드에서 이를 관리하고 컴포넌트와 이를 묶어줄 새로운 상태 변수를 만들기 때문이다.
이전 함수의 재평가 과정에서 생성되는 하위 노드들을 불필요한 생성등 처럼 특정 함수 생성시 매번 다시 state가 생성됨은 확실히 이상한 문제이다.
상태에서 어떤 종류의 손실이나 상태 초기화가 발생하지 않는다.
useState와 이에 전달된 기본값에 대해서는 한번만 고려되도록 처리한다.
컴포넌트가 처음 렌더링 될때 useState가 실행되면 리액트가 관리하는 새로운 상태 변수를 만들게 된다.
그 후에 어느 컴포넌트에 속하는지 기억해둔다.
재평가시에 새로운 상태가 생성되지않고 리액트가 이미 존재하는 상태를 알고 필요한경우는 업데이트 하게된다.
DOM에서 완전히 삭제되지않는 이상 상태의 초기화는 이루어지지않는다.
하위 컴포넌트가 삭제되고 연결되는 과정에서는 초기화가 이루어질수있다.
그렇지만 DOM에 컴포넌트가 연결되어있는상태에서는 최초의 초기화 이후에 갱신만 된다.
state는 스케줄방식으로 바로 즉각 최신값을 반영하지않고 컴포넌트가 리렌더링 된 후에 반영이 되어 최신상태가 유지된다
const [state,setState] = useState()에서 setState를 특정함수에서 지정하고 바로 다음 라인에서 반영되는게 아니라는 의미이다.
이말은 즉 컴포넌트 역시 재실행되고 재평가 된다는 의미이다. 
여기서는 리액트가 하는 역할이아니다.
여기서 만약 두개의 상태값이 하나의 함수에 변경된다면 스케줄은 하나의 프로세스로 보고 한번에 재평가를 진행한다.
두번으로 나누어 작업하지않는다는 의미이다.