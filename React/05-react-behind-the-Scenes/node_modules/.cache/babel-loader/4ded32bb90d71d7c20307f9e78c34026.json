{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/05-react-behind-the-Scenes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport './App.css';\nimport Button from './components/UI/Button/Button';\nimport Demooutput from './components/UI/Demo/DemoOutput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showParagraph, setShowParagraph] = useState(false);\n  console.log(\"APP RUNNING\");\n\n  const toggleParagrahHandler = () => {\n    setShowParagraph(prevShowParagraph => !prevShowParagraph);\n  }; // 버튼에 react.memo를 적용햇음에도 console이 찍힘을 확인할수있는데\n  // 즉 toggleParagrahHandler가 여전히 일반 함수처럼 실행되는데\n  // app 함수 내부에 함수는 매번 다시 새로운 함수로 재실행된다는 의미이다.\n  // 새로운 함수 주소값이 전달됨으로 원시값이 아닌 참조값 비교로 이루어진 의미이다.\n  // 방법은 useCallback에 있다.\n  // useCallBack은 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅으로\n  // 리액트에 이 함수를 저장하고 매번 실행할때마다 이 함수를 재생성할 필요가 없다는 걸 알릴수있다.\n  // 동일한 함수객체가 메모리의 동일한 위치에 저장되므로 비교를 할 수 있다.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Demooutput, {\n      show: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagrahHandler,\n      children: \"Toggle Paragraph!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n} // 위의 showParagraph가 boolean으로 사용되며 DemoOutput 컴포넌트에 전달된다.\n// app에 상태가 바뀔때마다 포함된 컴포넌트들 또한 재평가가 되기때문에 하위 노드도 재 호출됨을 인지해야한다.\n// 여기서 의문인부분은 과연 관련 함수가 변경되면 하위 트리도 모두 재실행될텐데 성능에 영향을 어느정도 미치는가 이다.\n// props가 없다면 상태변화가 없기에 출력결과도 바뀌는것이 없다.\n// 있다면 불필요한 함수의 재실행을 막을 필요가있다.\n// React.memo가 이에 해당한다.\n\n\n_s(App, \"eoYUlDKWxWYgikVZpaPr2UN2QyM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","Button","Demooutput","App","showParagraph","setShowParagraph","console","log","toggleParagrahHandler","prevShowParagraph"],"sources":["/home/ree/WORKSPACE/TECH/React/05-react-behind-the-Scenes/src/App.js"],"sourcesContent":["import React,{ useState, useCallback } from 'react';\n\nimport './App.css';\n\nimport Button from './components/UI/Button/Button'\nimport Demooutput from './components/UI/Demo/DemoOutput';\n\nfunction App() {\n\n  const [showParagraph, setShowParagraph] = useState(false);\n\n  console.log(\"APP RUNNING\")\n\n  const toggleParagrahHandler = () => {\n    setShowParagraph(prevShowParagraph => !prevShowParagraph);\n  }\n  // 버튼에 react.memo를 적용햇음에도 console이 찍힘을 확인할수있는데\n  // 즉 toggleParagrahHandler가 여전히 일반 함수처럼 실행되는데\n  // app 함수 내부에 함수는 매번 다시 새로운 함수로 재실행된다는 의미이다.\n  // 새로운 함수 주소값이 전달됨으로 원시값이 아닌 참조값 비교로 이루어진 의미이다.\n  // 방법은 useCallback에 있다.\n  // useCallBack은 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅으로\n  // 리액트에 이 함수를 저장하고 매번 실행할때마다 이 함수를 재생성할 필요가 없다는 걸 알릴수있다.\n  // 동일한 함수객체가 메모리의 동일한 위치에 저장되므로 비교를 할 수 있다.\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <Demooutput show={false} />\n      <Button onClick={toggleParagrahHandler}>Toggle Paragraph!</Button>\n    </div>\n  );\n}\n// 위의 showParagraph가 boolean으로 사용되며 DemoOutput 컴포넌트에 전달된다.\n// app에 상태가 바뀔때마다 포함된 컴포넌트들 또한 재평가가 되기때문에 하위 노드도 재 호출됨을 인지해야한다.\n// 여기서 의문인부분은 과연 관련 함수가 변경되면 하위 트리도 모두 재실행될텐데 성능에 영향을 어느정도 미치는가 이다.\n// props가 없다면 상태변화가 없기에 출력결과도 바뀌는것이 없다.\n// 있다면 불필요한 함수의 재실행을 막을 필요가있다.\n// React.memo가 이에 해당한다.\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,QAA4C,OAA5C;AAEA,OAAO,WAAP;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD;EAEAO,OAAO,CAACC,GAAR,CAAY,aAAZ;;EAEA,MAAMC,qBAAqB,GAAG,MAAM;IAClCH,gBAAgB,CAACI,iBAAiB,IAAI,CAACA,iBAAvB,CAAhB;EACD,CAFD,CANa,CASb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,UAAD;MAAY,IAAI,EAAE;IAAlB;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,MAAD;MAAQ,OAAO,EAAED,qBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,C,CACD;AACA;AACA;AACA;AACA;AACA;;;GA9BSL,G;;KAAAA,G;AA+BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}