{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/05-react-behind-the-Scenes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/UI/Button/Button\";\nimport Demooutput from \"./components/UI/Demo/DemoOutput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showParagraph, setShowParagraph] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n  console.log(\"APP RUNNING\");\n  const toggleParagrahHandler = useCallback(() => {\n    // 2)\n    // 아래와 같이 토글을 두었을때 아무 콘솔도 출력되지않는다.\n    // 이유는 자바스크립트에서 함수는 클로저이고 useCallback을 제대로 사용하지 않아서이다.\n    // 자바스크립트는 함수 사용시 이 안에서 사용되는 모든 변수를 잠그게 된다.(함수 블록안에서)\n    // 초기에 toggleParagraphHandler가 실행시 인자인 allowToggle 상수를 그대로 사용하게된다.\n    // 따라서 이변수가 저장된 시점의 값을 사용하게된다.(그대로 유지된다는의미)\n    // 이 토글함수 실행시 리액트는 이  함수를 재생성하지 않는다. 이미 useCallback으로 막아놨기때문이다. \n    // 따라서 allowToggle이라는 인자는 최신의 것이아닌 예전의 것이 그대로 입려되어서 재실행되지않는다.(useCallback의 특성)\n    if (allowToggle) {\n      setShowParagraph(prevShowParagraph => !prevShowParagraph);\n    }\n  }, []); // 1)\n  // 버튼에 react.memo를 적용햇음에도 console이 찍힘을 확인할수있는데\n  // 즉 toggleParagrahHandler가 여전히 일반 함수처럼 실행되는데\n  // app 함수 내부에 함수는 매번 다시 새로운 함수로 재실행된다는 의미이다.\n  // 새로운 함수 주소값이 전달됨으로 원시값이 아닌 참조값 비교로 이루어진 의미이다.\n  // 방법은 useCallback에 있다.\n  // useCallBack은 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅으로\n  // 리액트에 이 함수를 저장하고 매번 실행할때마다 이 함수를 재생성할 필요가 없다는 걸 알릴수있다.\n  // 동일한 함수객체가 메모리의 동일한 위치에 저장되므로 비교를 할 수 있다.\n  // useEffect와 동일하게 두번째 인자로 의존성 추가할수있다.\n\n  const allowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Demooutput, {\n      show: showParagraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagrahHandler,\n      children: \"Toggle Paragraph!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: allowToggleHandler,\n      children: \"Allow Toggling !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n} // 위의 showParagraph가 boolean으로 사용되며 DemoOutput 컴포넌트에 전달된다.\n// app에 상태가 바뀔때마다 포함된 컴포넌트들 또한 재평가가 되기때문에 하위 노드도 재 호출됨을 인지해야한다.\n// 여기서 의문인부분은 과연 관련 함수가 변경되면 하위 트리도 모두 재실행될텐데 성능에 영향을 어느정도 미치는가 이다.\n// props가 없다면 상태변화가 없기에 출력결과도 바뀌는것이 없다.\n// 있다면 불필요한 함수의 재실행을 막을 필요가있다.\n// React.memo가 이에 해당한다.\n\n\n_s(App, \"Blnt/S11bsuy2j3/OyINnyIsp7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","Button","Demooutput","App","showParagraph","setShowParagraph","allowToggle","setAllowToggle","console","log","toggleParagrahHandler","prevShowParagraph","allowToggleHandler"],"sources":["/home/ree/WORKSPACE/TECH/React/05-react-behind-the-Scenes/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\n\nimport \"./App.css\";\n\nimport Button from \"./components/UI/Button/Button\";\nimport Demooutput from \"./components/UI/Demo/DemoOutput\";\n\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n\n  console.log(\"APP RUNNING\");\n\n  const toggleParagrahHandler = useCallback(() => {\n    // 2)\n    // 아래와 같이 토글을 두었을때 아무 콘솔도 출력되지않는다.\n    // 이유는 자바스크립트에서 함수는 클로저이고 useCallback을 제대로 사용하지 않아서이다.\n    // 자바스크립트는 함수 사용시 이 안에서 사용되는 모든 변수를 잠그게 된다.(함수 블록안에서)\n    // 초기에 toggleParagraphHandler가 실행시 인자인 allowToggle 상수를 그대로 사용하게된다.\n    // 따라서 이변수가 저장된 시점의 값을 사용하게된다.(그대로 유지된다는의미)\n    // 이 토글함수 실행시 리액트는 이  함수를 재생성하지 않는다. 이미 useCallback으로 막아놨기때문이다. \n    // 따라서 allowToggle이라는 인자는 최신의 것이아닌 예전의 것이 그대로 입려되어서 재실행되지않는다.(useCallback의 특성)\n    if (allowToggle) {\n      setShowParagraph((prevShowParagraph) => !prevShowParagraph);\n    }\n  }, []);\n\n  // 1)\n  // 버튼에 react.memo를 적용햇음에도 console이 찍힘을 확인할수있는데\n  // 즉 toggleParagrahHandler가 여전히 일반 함수처럼 실행되는데\n  // app 함수 내부에 함수는 매번 다시 새로운 함수로 재실행된다는 의미이다.\n  // 새로운 함수 주소값이 전달됨으로 원시값이 아닌 참조값 비교로 이루어진 의미이다.\n  // 방법은 useCallback에 있다.\n  // useCallBack은 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅으로\n  // 리액트에 이 함수를 저장하고 매번 실행할때마다 이 함수를 재생성할 필요가 없다는 걸 알릴수있다.\n  // 동일한 함수객체가 메모리의 동일한 위치에 저장되므로 비교를 할 수 있다.\n  // useEffect와 동일하게 두번째 인자로 의존성 추가할수있다.\n\n  const allowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <Demooutput show={showParagraph} />\n      <Button onClick={toggleParagrahHandler}>Toggle Paragraph!</Button>\n      <Button onClick={allowToggleHandler}>Allow Toggling !</Button>\n    </div>\n  );\n}\n// 위의 showParagraph가 boolean으로 사용되며 DemoOutput 컴포넌트에 전달된다.\n// app에 상태가 바뀔때마다 포함된 컴포넌트들 또한 재평가가 되기때문에 하위 노드도 재 호출됨을 인지해야한다.\n// 여기서 의문인부분은 과연 관련 함수가 변경되면 하위 트리도 모두 재실행될텐데 성능에 영향을 어느정도 미치는가 이다.\n// props가 없다면 상태변화가 없기에 출력결과도 바뀌는것이 없다.\n// 있다면 불필요한 함수의 재실행을 막을 필요가있다.\n// React.memo가 이에 해당한다.\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA,OAAO,WAAP;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD;EACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;EAEAS,OAAO,CAACC,GAAR,CAAY,aAAZ;EAEA,MAAMC,qBAAqB,GAAGV,WAAW,CAAC,MAAM;IAC9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIM,WAAJ,EAAiB;MACfD,gBAAgB,CAAEM,iBAAD,IAAuB,CAACA,iBAAzB,CAAhB;IACD;EACF,CAZwC,EAYtC,EAZsC,CAAzC,CANa,CAoBb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,kBAAkB,GAAG,MAAM;IAC/BL,cAAc,CAAC,IAAD,CAAd;EACD,CAFD;;EAGA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,UAAD;MAAY,IAAI,EAAEH;IAAlB;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,MAAD;MAAQ,OAAO,EAAEM,qBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE,QAAC,MAAD;MAAQ,OAAO,EAAEE,kBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAQD,C,CACD;AACA;AACA;AACA;AACA;AACA;;;GAhDST,G;;KAAAA,G;AAiDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}