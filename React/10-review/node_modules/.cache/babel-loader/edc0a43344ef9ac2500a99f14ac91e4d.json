{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/10-review/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(true);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); // useState 와 ref 중에 선택해서 사용한다면\n    // 즉각적으로 유효성 검증에 사용하는경우 useState로 읽는것이 좋다 매순간 체크하기때문이기도하고 마지막 제출시 useState를 null로 두어 비우기도 되기때문이다.\n    // ref의 경우 한번만 제출하는 양식에 좋다. 매순간 굳이 업데이트가 필요하지않은경우에 사용하면 효율적으로 연산이 한번수행되기때문\n\n    nameInputRef.current.value = ''; // 직접 바닐라 자바스크립트로 DOM에 접근하는 방법은 지양하도록해야한다.\n\n    setEnteredName('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), !enteredNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"sXQoJW1WsTxf+potPsBjU2NDuCg=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","nameInputChangeHandler","event","target","value","formSubmissionHandler","preventDefault","trim","console","log","enteredValue","current"],"sources":["/home/ree/WORKSPACE/TECH/React/10-review/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef } from 'react';\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(true);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false)\n      return;\n    }\n\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n\n    // useState 와 ref 중에 선택해서 사용한다면\n    // 즉각적으로 유효성 검증에 사용하는경우 useState로 읽는것이 좋다 매순간 체크하기때문이기도하고 마지막 제출시 useState를 null로 두어 비우기도 되기때문이다.\n    // ref의 경우 한번만 제출하는 양식에 좋다. 매순간 굳이 업데이트가 필요하지않은경우에 사용하면 효율적으로 연산이 한번수행되기때문\n    nameInputRef.current.value = '';\n    // 직접 바닐라 자바스크립트로 DOM에 접근하는 방법은 지양하도록해야한다.\n    setEnteredName('');\n  };\n\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className='form-control'>\n        <label htmlFor='name'>Your Name</label>\n        <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} value={enteredName}/>\n        {!enteredNameIsValid && <p>Name must not be empty.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,YAAY,GAAGH,MAAM,EAA3B;EACA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,IAAD,CAA5D;;EAEA,MAAMS,sBAAsB,GAAGC,KAAK,IAAI;IACtCJ,cAAc,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACD,CAFD;;EAIA,MAAMC,qBAAqB,GAAGH,KAAK,IAAI;IACrCA,KAAK,CAACI,cAAN;;IAEA,IAAIT,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BP,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IAGDQ,OAAO,CAACC,GAAR,CAAYZ,WAAZ;IACA,MAAMa,YAAY,GAAGd,YAAY,CAACe,OAAb,CAAqBP,KAA1C;IACAI,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAXqC,CAarC;IACA;IACA;;IACAd,YAAY,CAACe,OAAb,CAAqBP,KAArB,GAA6B,EAA7B,CAhBqC,CAiBrC;;IACAN,cAAc,CAAC,EAAD,CAAd;EACD,CAnBD;;EAsBA,oBACE;IAAM,QAAQ,EAAEO,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAC,cAAf;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,GAAG,EAAET,YAAZ;QAA0B,IAAI,EAAC,MAA/B;QAAsC,EAAE,EAAC,MAAzC;QAAgD,QAAQ,EAAEK,sBAA1D;QAAkF,KAAK,EAAEJ;MAAzF;QAAA;QAAA;QAAA;MAAA,QAFF,EAGG,CAACE,kBAAD,iBAAuB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAH1B;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA3CD;;GAAML,W;;KAAAA,W;AA6CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}