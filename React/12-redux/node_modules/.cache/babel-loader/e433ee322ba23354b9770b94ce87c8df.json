{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/12-redux/src/components/Counter.js\",\n    _s = $RefreshSig$();\n\n// import { Component } from \"react\";\n// react-redux팀에서 만든 커스텀 훅사용\n// connect는 클래스형기반에서 사용\nimport { useSelector, connect, useDispatch } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  //   // 스토어에서 어떤 데이터를 추출할지 선택함\n  //   // 아래와같이 useSelector를 설정할경우 리액트리덕스가 자동으로 서브스크립션을 설정한다.\n  //   // 그렇기떄문에 리덕스 스토어가 바뀐다면 자동으로 컴포넌트 함수가 다시 실행될것이다.\n  //   // 만약 UNMOUNT시에는 자동으로 리액트 리덕스가 서브스크립션을 클리어한다.\n  const counter = useSelector(state => state.counter);\n  const dispatch = useDispatch();\n\n  const incrementHandler = () => {\n    dispatch({\n      type: \"increment\"\n    });\n  };\n\n  const increaseHandler = () => {\n    dispatch({\n      type: \"increase\",\n      amount: 5\n    });\n  };\n\n  const decrementHandler = () => {\n    dispatch({\n      type: \"decrement\"\n    });\n  };\n\n  const toggleCounterHandler = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}; // class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n//   toggleCounterHandler() {\n//   }\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//       <h1>Redux Counter</h1>\n//       <div className={classes.value}>{this.props.counter}</div>\n//       <div>\n//         <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//         <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//       </div>\n//       <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//     </main>\n//     )\n//   }\n// }\n\n\n_s(Counter, \"kekweKlgGDYl7VGjQQ+BKXXb0Ho=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Counter;\nexport default Counter; // const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n//  connect시 리액트 리덕스가 서브스크립션을 설정함\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["useSelector","connect","useDispatch","classes","Counter","counter","state","dispatch","incrementHandler","type","increaseHandler","amount","decrementHandler","toggleCounterHandler","value"],"sources":["/home/ree/WORKSPACE/TECH/React/12-redux/src/components/Counter.js"],"sourcesContent":["// import { Component } from \"react\";\n\n// react-redux팀에서 만든 커스텀 훅사용\n// connect는 클래스형기반에서 사용\nimport { useSelector, connect, useDispatch } from \"react-redux\";\n\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  //   // 스토어에서 어떤 데이터를 추출할지 선택함\n  //   // 아래와같이 useSelector를 설정할경우 리액트리덕스가 자동으로 서브스크립션을 설정한다.\n  //   // 그렇기떄문에 리덕스 스토어가 바뀐다면 자동으로 컴포넌트 함수가 다시 실행될것이다.\n  //   // 만약 UNMOUNT시에는 자동으로 리액트 리덕스가 서브스크립션을 클리어한다.\n  const counter = useSelector((state) => state.counter);\n\n  const dispatch = useDispatch();\n\n  const incrementHandler = () => {\n    dispatch({ type: \"increment\" });\n  };\n\n  const increaseHandler = () => {\n    dispatch({ type: \"increase\", amount: 5 });\n  };\n\n\n  const decrementHandler = () => {\n    dispatch({ type: \"decrement\" });\n  };\n\n  const toggleCounterHandler = () => {};\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{counter}</div>\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 5</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {\n//   }\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//       <h1>Redux Counter</h1>\n//       <div className={classes.value}>{this.props.counter}</div>\n//       <div>\n//         <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//         <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//       </div>\n//       <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//     </main>\n//     )\n\n//   }\n// }\n\nexport default Counter;\n\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n//  connect시 리액트 리덕스가 서브스크립션을 설정함\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"],"mappings":";;;AAAA;AAEA;AACA;AACA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,OAAlB,CAA3B;EAEA,MAAME,QAAQ,GAAGL,WAAW,EAA5B;;EAEA,MAAMM,gBAAgB,GAAG,MAAM;IAC7BD,QAAQ,CAAC;MAAEE,IAAI,EAAE;IAAR,CAAD,CAAR;EACD,CAFD;;EAIA,MAAMC,eAAe,GAAG,MAAM;IAC5BH,QAAQ,CAAC;MAAEE,IAAI,EAAE,UAAR;MAAoBE,MAAM,EAAE;IAA5B,CAAD,CAAR;EACD,CAFD;;EAKA,MAAMC,gBAAgB,GAAG,MAAM;IAC7BL,QAAQ,CAAC;MAAEE,IAAI,EAAE;IAAR,CAAD,CAAR;EACD,CAFD;;EAIA,MAAMI,oBAAoB,GAAG,MAAM,CAAE,CAArC;;EAEA,oBACE;IAAM,SAAS,EAAEV,OAAO,CAACE,OAAzB;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAEF,OAAO,CAACW,KAAxB;MAAA,UAAgCT;IAAhC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,wBACE;QAAQ,OAAO,EAAEG,gBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAQ,OAAO,EAAEE,eAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAQ,OAAO,EAAEE,gBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAQE;MAAQ,OAAO,EAAEC,oBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CApCD,C,CAsCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;GAhEMT,O;UAKYJ,W,EAECE,W;;;KAPbE,O;AAkEN,eAAeA,OAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}