{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; // redux가 커짐에따라 쪼개기위해 redux Toolkit 라이브러리를 사용한다.\n// 툴킷사용시 이미 툴킷에 redux가 포함되어있기에 기존 라이브러리를 삭제해야한다.\n\ncreateSlice({\n  name: 'counter',\n  initialState,\n  // 위 state는 reducer함수가 필요하다\n  // 아래 함수들은 나중에 리덕스에 의해 호출됨\n  reducers: {\n    increment(state) {},\n\n    decrement() {},\n\n    increase() {},\n\n    toggleCounter() {}\n\n  }\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    counter: 0,\n    showCounter: true\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"increment\") {\n    return {\n      // 리덕스도 기존의 것을 대체하지않고 덮어쓰기에 주의해야한다.\n      // 항상 새로운 객체로 생성되도록 해야하며 기존의 값에 대체하는 방법이 있어서는 안된다.\n      // 이유는 기존 객체를 계속사용하면 참조된 주소값을 알아내어 재정의하기 쉽기때문에\n      //   이를 방지하기위해서 매번 새로운 값을 생성하도록 하는것이다.\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","toggleCounter","counterReducer","action","type","amount","store"],"sources":["/home/ree/WORKSPACE/TECH/React/12-redux/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\n// redux가 커짐에따라 쪼개기위해 redux Toolkit 라이브러리를 사용한다.\n// 툴킷사용시 이미 툴킷에 redux가 포함되어있기에 기존 라이브러리를 삭제해야한다.\ncreateSlice( {\n    name: 'counter',\n    initialState,\n    // 위 state는 reducer함수가 필요하다\n    // 아래 함수들은 나중에 리덕스에 의해 호출됨\n    reducers: {\n        increment(state) {},\n        decrement() {},\n        increase() {},\n        toggleCounter() {}\n    }\n});\nconst counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n  if (action.type === \"increment\") {\n    return {\n      // 리덕스도 기존의 것을 대체하지않고 덮어쓰기에 주의해야한다.\n      // 항상 새로운 객체로 생성되도록 해야하며 기존의 값에 대체하는 방법이 있어서는 안된다.\n      // 이유는 기존 객체를 계속사용하면 참조된 주소값을 알아내어 재정의하기 쉽기때문에\n      //   이를 방지하기위해서 매번 새로운 값을 생성하도록 하는것이다.\n      counter: state.counter + 1,\n      showCounter: state.showCounter,\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter,\n    };\n  }\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter,\n    };\n  }\n\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter,\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAArB,C,CAEA;AACA;;AACAH,WAAW,CAAE;EACTI,IAAI,EAAE,SADG;EAETH,YAFS;EAGT;EACA;EACAI,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAD,EAAQ,CAAE,CADb;;IAENC,SAAS,GAAG,CAAE,CAFR;;IAGNC,QAAQ,GAAG,CAAE,CAHP;;IAINC,aAAa,GAAG,CAAE;;EAJZ;AALD,CAAF,CAAX;;AAYA,MAAMC,cAAc,GAAG,YAAuD;EAAA,IAAtDJ,KAAsD,uEAA9C;IAAEL,OAAO,EAAE,CAAX;IAAcC,WAAW,EAAE;EAA3B,CAA8C;EAAA,IAAXS,MAAW;;EAC5E,IAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAO;MACL;MACA;MACA;MACA;MACAX,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CALpB;MAMLC,WAAW,EAAEI,KAAK,CAACJ;IANd,CAAP;EAQD;;EAED,IAAIS,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;IAC9B,OAAO;MACLX,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgBU,MAAM,CAACE,MAD3B;MAELX,WAAW,EAAEI,KAAK,CAACJ;IAFd,CAAP;EAID;;EAED,IAAIS,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAO;MACLX,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;MAELC,WAAW,EAAEI,KAAK,CAACJ;IAFd,CAAP;EAID;;EAED,IAAIS,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAO;MACLV,WAAW,EAAE,CAACI,KAAK,CAACJ,WADf;MAELD,OAAO,EAAEK,KAAK,CAACL;IAFV,CAAP;EAID;;EAED,OAAOK,KAAP;AACD,CAlCD;;AAoCA,MAAMQ,KAAK,GAAGhB,WAAW,CAACY,cAAD,CAAzB;AAEA,eAAeI,KAAf"},"metadata":{},"sourceType":"module"}