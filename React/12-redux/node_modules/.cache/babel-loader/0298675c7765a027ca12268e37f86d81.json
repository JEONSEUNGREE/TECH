{"ast":null,"code":"var _jsxFileName = \"/home/ree/WORKSPACE/TECH/React/12-redux/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from './store/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render(\n/*#__PURE__*/\n// contextAPI와같이 사용하고자하는 상위 컴포넌트에 감싼다.\n// store props를 설정\n_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this), document.getElementById(\"root\")); // local state 컴포넌트 내의 state를 의미\n// cross-component state 여러 컴포넌트간의 state 전달 값 props-chain\n// app-wide state 앱 전체 컴포넌트에 영향을 주는 state - contextAPI\n// ContextAPI Vs Redux\n// ContextAPI 단점 :\n// 복잡한 설정 <XXXXProvider>의 형태가 app.js에서 메인 컴포넌트를 xml형태로 지나치게 감싸고 있어서 복잡해질 수 있다는 의미\n// 빈번히 일어나는 변경에 성능이 좋지 못하다.\n// 리덕스 작동 방식\n// 컴포넌트에서 직접적으로 store의 정보를 조작하지않는다.\n// 그렇기때문에 store에서 subscription을 통해서 component에 state를 전달한다. 리듀서로 함수 변형을 담당하게된다.\n// 리듀서함수는 useReducer훅과 다른 함수이며 입력값을 받아서 다른 값으로 변환해주는 함수이다.\n//       dispatch    forwarded to        mutates(change state)\n// comonent => action => reducer function => controlData(store)\n// 1. npm i redux\n// 2. npm i redux react-redux","map":{"version":3,"names":["React","ReactDOM","Provider","App","store","render","document","getElementById"],"sources":["/home/ree/WORKSPACE/TECH/React/12-redux/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from './store/index'\n\nReactDOM.render(\n    // contextAPI와같이 사용하고자하는 상위 컴포넌트에 감싼다.\n    // store props를 설정\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// local state 컴포넌트 내의 state를 의미\n// cross-component state 여러 컴포넌트간의 state 전달 값 props-chain\n// app-wide state 앱 전체 컴포넌트에 영향을 주는 state - contextAPI\n\n// ContextAPI Vs Redux\n// ContextAPI 단점 :\n// 복잡한 설정 <XXXXProvider>의 형태가 app.js에서 메인 컴포넌트를 xml형태로 지나치게 감싸고 있어서 복잡해질 수 있다는 의미\n// 빈번히 일어나는 변경에 성능이 좋지 못하다.\n\n// 리덕스 작동 방식\n// 컴포넌트에서 직접적으로 store의 정보를 조작하지않는다.\n// 그렇기때문에 store에서 subscription을 통해서 component에 state를 전달한다. 리듀서로 함수 변형을 담당하게된다.\n// 리듀서함수는 useReducer훅과 다른 함수이며 입력값을 받아서 다른 값으로 변환해주는 함수이다.\n\n//       dispatch    forwarded to        mutates(change state)\n// comonent => action => reducer function => controlData(store)\n\n// 1. npm i redux\n// 2. npm i redux react-redux\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEAH,QAAQ,CAACI,MAAT;AAAA;AACI;AACA;AACF,QAAC,QAAD;EAAU,KAAK,EAAED,KAAjB;EAAA,uBACE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QAHF,EAMEE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}