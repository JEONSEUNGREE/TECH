{"ast":null,"code":"// 여러개의 slice를 합치기위함으로 기존 리덕스에 combineReducers를 사용해도 되지만\n// 툴킷의 함수를 사용한다.\n// import { createStore, combineReducers } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; // redux가 커짐에따라 쪼개기위해 redux Toolkit 라이브러리를 사용한다.\n// 툴킷사용시 이미 툴킷에 redux가 포함되어있기에 기존 라이브러리를 삭제해야한다.\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // 위 state는 reducer함수가 필요하다\n  // 아래 함수들은 나중에 리덕스에 의해 호출됨\n  reducers: {\n    // 호출한곳에만 사용됨으로 if문이 따로 필요없음\n    // 고유 액션 식별자가 자동으로 설정되었기때문\n    increment(state) {\n      // 아래와같이두면 immer라는 다른패키지를 사용해 기존 코드를 자동복사해서 새로운 객체를 생성함 (변경불가하게하고 새로운 객체를 생성함)\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      // action을 listen하는 리듀서 payload, data를 가지고있음\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       // 리덕스도 기존의 것을 대체하지않고 덮어쓰기에 주의해야한다.\n//       // 항상 새로운 객체로 생성되도록 해야하며 기존의 값에 대체하는 방법이 있어서는 안된다.\n//       // 이유는 기존 객체를 계속사용하면 참조된 주소값을 알아내어 재정의하기 쉽기때문에\n//       //   이를 방지하기위해서 매번 새로운 값을 생성하도록 하는것이다.\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,c\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };.\n// 툴킷으로 자동생성된 메서드 접근이 가능함 (액션 객체 생성자)\n\nconst store = configureStore({\n  // 맵형태로 slice를 합친다.\n  // reducer: { counter: counterSlice.reducer }\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"sources":["/home/ree/WORKSPACE/TECH/React/12-redux/src/store/index.js"],"sourcesContent":["// 여러개의 slice를 합치기위함으로 기존 리덕스에 combineReducers를 사용해도 되지만\n// 툴킷의 함수를 사용한다.\n// import { createStore, combineReducers } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\n// redux가 커짐에따라 쪼개기위해 redux Toolkit 라이브러리를 사용한다.\n// 툴킷사용시 이미 툴킷에 redux가 포함되어있기에 기존 라이브러리를 삭제해야한다.\nconst counterSlice = createSlice( {\n    name: 'counter',\n    initialState,\n    // 위 state는 reducer함수가 필요하다\n    // 아래 함수들은 나중에 리덕스에 의해 호출됨\n    reducers: {\n        // 호출한곳에만 사용됨으로 if문이 따로 필요없음\n        // 고유 액션 식별자가 자동으로 설정되었기때문\n        increment(state) {\n            // 아래와같이두면 immer라는 다른패키지를 사용해 기존 코드를 자동복사해서 새로운 객체를 생성함 (변경불가하게하고 새로운 객체를 생성함)\n            state.counter++\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            // action을 listen하는 리듀서 payload, data를 가지고있음\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n});\n\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       // 리덕스도 기존의 것을 대체하지않고 덮어쓰기에 주의해야한다.\n//       // 항상 새로운 객체로 생성되도록 해야하며 기존의 값에 대체하는 방법이 있어서는 안된다.\n//       // 이유는 기존 객체를 계속사용하면 참조된 주소값을 알아내어 재정의하기 쉽기때문에\n//       //   이를 방지하기위해서 매번 새로운 값을 생성하도록 하는것이다.\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,c\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };.\n\n// 툴킷으로 자동생성된 메서드 접근이 가능함 (액션 객체 생성자)\n\nconst store = configureStore({\n    // 맵형태로 slice를 합친다.\n    // reducer: { counter: counterSlice.reducer }\n    reducer: counterSlice.reducer\n});\n\nexport const counterActions = counterSlice.actions;\n\nexport default store;\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAArB,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAE;EAC9BM,IAAI,EAAE,SADwB;EAE9BJ,YAF8B;EAG9B;EACA;EACAK,QAAQ,EAAE;IACN;IACA;IACAC,SAAS,CAACC,KAAD,EAAQ;MACb;MACAA,KAAK,CAACN,OAAN;IACH,CANK;;IAONO,SAAS,CAACD,KAAD,EAAQ;MACbA,KAAK,CAACN,OAAN;IACH,CATK;;IAUNQ,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACpB;MACAH,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC;IACH,CAbK;;IAcNC,aAAa,CAACL,KAAD,EAAQ;MACjBA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;IACH;;EAhBK;AALoB,CAAF,CAAhC,C,CAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,MAAMW,KAAK,GAAGd,cAAc,CAAC;EACzB;EACA;EACAe,OAAO,EAAEX,YAAY,CAACW;AAHG,CAAD,CAA5B;AAMA,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC;AAEP,eAAeH,KAAf"},"metadata":{},"sourceType":"module"}