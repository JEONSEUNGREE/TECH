1.1--- function에서 기존에 리턴값을 지정하지 않아도 에러가 발생하지않는 이유는 타입추론이 자동으로 동작하기 때문이었다.

function test ( parameter : number , parameter2 : number) {
    return parameter * parameter2
}

1.2--- 하지만 이제는 타입을 아래와같이 지정해야할 필요가있다.

function test ( parameter : number , parameter2 : number) : number {
    return parameter * parameter2
}

2--- function에 void 말고 never라는 타입이 존재한다.
void의 경우 null 혹은 undefined가 반환될수있지만 never라는 타입은 아무 값도 반환하지않게 되고 assign(대입) 되지않는다.
function exceptionThrow (message?: string) : never {
    throw Error(message);
}
와 같은 에러 발생시 반환타입을 never로 동작시킬 수 있고 assign(대입) 되지않는다.

3--- 배열 초기화
1. 타입지정과 함께 초기화const members : string[] = [ "Kim", "Park", "Lee"];

2. any 타입으로 초기화 const members = ["Kim", "Park", "Lee"];

3. 혹은 문자, 숫자로 초기화 가능하다. const members : ( string | number ) [] = [];

4--- 튜플
튜플을 이용시 배열의 요소 수와 각 요소에 대한 타입을 지정할 수 있다.
튜플은 정해진 길이에 맞지않으면 에러가 발생하고 배열과 다르게 불변적이다.
하지만 push()함수 사용시 튜플의 규칙이 무시된다.
튜플은 배열과 다르게 정해진 순서에 맞게 넣는다.
                [0]     [1]
const tuples: [string, number] = [ "kim", 30 ];

tuples[0] = "test" // 위에서 첫번째인자로 string을 지정하여가능
tuples[0] = 50 // 첫번째인자로 string을 불가능

tuples.push(100); // ["test", 100]
